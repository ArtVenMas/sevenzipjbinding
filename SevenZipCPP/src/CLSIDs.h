#ifndef __CLSIDS_H__INCLUDED__

// {23170F69-40C1-278A-1000-000110040000}
DEFINE_GUID(CLSID_CArjHandler, 
		0x23170F69, 0x40C1, 0x278A, 0x10, 0x00, 0x00, 0x01, 0x10, 0x04, 0x00, 0x00);

// {23170F69-40C1-278A-1000-000110070000}
DEFINE_GUID(CLSID_CFormat7z, 0x23170F69, 0x40C1, 0x278A, 0x10, 0x00, 0x00,
		0x01, 0x10, /*0x07*/0x01, 0x00, 0x00);

//// {23170F69-40C1-278B-0402-020000000100}
//DEFINE_GUID(CLSID_CCompressBZip2Encoder, 
//		0x23170F69, 0x40C1, 0x278B, 0x04, 0x02, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00);
//
//// {23170F69-40C1-278B-0402-020000000000}
//DEFINE_GUID(CLSID_CCompressBZip2Decoder, 
//		0x23170F69, 0x40C1, 0x278B, 0x04, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00);

// {23170F69-40C1-278A-1000-000110020000}
DEFINE_GUID(CLSID_CBZip2Handler, 
		0x23170F69, 0x40C1, 0x278A, 0x10, 0x00, 0x00, 0x01, 0x10, 0x02, 0x00, 0x00);

// {23170F69-40C1-278A-1000-000110080000}
DEFINE_GUID(CLSID_CCabHandler, 
		0x23170F69, 0x40C1, 0x278A, 0x10, 0x00, 0x00, 0x01, 0x10, 0x08, 0x00, 0x00);


// {23170F69-40C1-278A-1000-000110E90000}
DEFINE_GUID(CLSID_CChmHandler, 
		0x23170F69, 0x40C1, 0x278A, 0x10, 0x00, 0x00, 0x01, 0x10, 0xE9, 0x00, 0x00);

// {23170F69-40C1-278A-1000-000110ED0000}
DEFINE_GUID(CLSID_CCpioHandler, 
		0x23170F69, 0x40C1, 0x278A, 0x10, 0x00, 0x00, 0x01, 0x10, 0xED, 0x00, 0x00);

// {23170F69-40C1-278A-1000-000110EC0000}
DEFINE_GUID(CLSID_CDebHandler, 
		0x23170F69, 0x40C1, 0x278A, 0x10, 0x00, 0x00, 0x01, 0x10, 0xEC, 0x00, 0x00);

// {23170F69-40C1-278A-1000-000110EF0000}
DEFINE_GUID(CLSID_CGZipHandler, 
		0x23170F69, 0x40C1, 0x278A, 0x10, 0x00, 0x00, 0x01, 0x10, 0xEF, 0x00, 0x00);

//// {23170F69-40C1-278B-0401-080000000100}
//DEFINE_GUID(CLSID_CCompressDeflateEncoder, 
//		0x23170F69, 0x40C1, 0x278B, 0x04, 0x01, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00);
//
//// {23170F69-40C1-278B-0401-080000000000}
//DEFINE_GUID(CLSID_CCompressDeflateDecoder, 
//		0x23170F69, 0x40C1, 0x278B, 0x04, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00);
//
// {23170F69-40C1-278A-1000-000110E70000}
DEFINE_GUID(CLSID_CIsoHandler, 
		0x23170F69, 0x40C1, 0x278A, 0x10, 0x00, 0x00, 0x01, 0x10, 0xE7, 0x00, 0x00);

// {23170F69-40C1-278A-1000-000110060000}
DEFINE_GUID(CLSID_CLzhHandler, 
		0x23170F69, 0x40C1, 0x278A, 0x10, 0x00, 0x00, 0x01, 0x10, 0x06, 0x00, 0x00);

// {23170F69-40C1-278A-1000-000110090000}
DEFINE_GUID(CLSID_CNsisHandler, 
		0x23170F69, 0x40C1, 0x278A, 0x10, 0x00, 0x00, 0x01, 0x10, 0x09, 0x00, 0x00);

//// {23170F69-40C1-278B-0601-010000000000}
//DEFINE_GUID(CLSID_CCrypto_AES128_Decoder, 
//		0x23170F69, 0x40C1, 0x278B, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00);
//
//// {23170F69-40C1-278B-0403-010000000000}
//DEFINE_GUID(CLSID_CCompressRar15Decoder, 
//		0x23170F69, 0x40C1, 0x278B, 0x04, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00);
//
//// {23170F69-40C1-278B-0403-020000000000}
//DEFINE_GUID(CLSID_CCompressRar20Decoder, 
//		0x23170F69, 0x40C1, 0x278B, 0x04, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00);
//
//// {23170F69-40C1-278B-0403-030000000000}
//DEFINE_GUID(CLSID_CCompressRar29Decoder, 
//		0x23170F69, 0x40C1, 0x278B, 0x04, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00);

// {23170F69-40C1-278A-1000-000110030000}
DEFINE_GUID(CLSID_CRarHandler, 
		0x23170F69, 0x40C1, 0x278A, 0x10, 0x00, 0x00, 0x01, 0x10, 0x03, 0x00, 0x00);

// {23170F69-40C1-278A-1000-000110EB0000}
DEFINE_GUID(CLSID_CRpmHandler, 
		0x23170F69, 0x40C1, 0x278A, 0x10, 0x00, 0x00, 0x01, 0x10, 0xEB, 0x00, 0x00);

// {23170F69-40C1-278A-1000-000110EA0000}
DEFINE_GUID(CLSID_CSplitHandler, 
		0x23170F69, 0x40C1, 0x278A, 0x10, 0x00, 0x00, 0x01, 0x10, 0xEA, 0x00, 0x00);

// {23170F69-40C1-278A-1000-000110EE0000}
DEFINE_GUID(CLSID_CTarHandler, 
		0x23170F69, 0x40C1, 0x278A, 0x10, 0x00, 0x00, 0x01, 0x10, 0xEE, 0x00, 0x00);

// {23170F69-40C1-278A-1000-000110050000}
DEFINE_GUID(CLSID_CZHandler, 
		0x23170F69, 0x40C1, 0x278A, 0x10, 0x00, 0x00, 0x01, 0x10, 0x05, 0x00, 0x00);

//// {23170F69-40C1-278B-0401-080000000100}
//DEFINE_GUID(CLSID_CCompressDeflateEncoder, 
//		0x23170F69, 0x40C1, 0x278B, 0x04, 0x01, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00);
//
//// {23170F69-40C1-278B-0401-080000000000}
//DEFINE_GUID(CLSID_CCompressDeflateDecoder, 
//		0x23170F69, 0x40C1, 0x278B, 0x04, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00);
//
//// {23170F69-40C1-278B-0401-090000000100}
//DEFINE_GUID(CLSID_CCompressDeflate64Encoder, 
//		0x23170F69, 0x40C1, 0x278B, 0x04, 0x01, 0x09, 0x00, 0x00, 0x00, 0x01, 0x00);
//
//// {23170F69-40C1-278B-0401-090000000000}
//DEFINE_GUID(CLSID_CCompressDeflate64Decoder, 
//		0x23170F69, 0x40C1, 0x278B, 0x04, 0x01, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00);
//
//// {23170F69-40C1-278B-0402-020000000100}
//DEFINE_GUID(CLSID_CCompressBZip2Encoder, 
//		0x23170F69, 0x40C1, 0x278B, 0x04, 0x02, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00);
//
//// {23170F69-40C1-278B-0402-020000000000}
//DEFINE_GUID(CLSID_CCompressBZip2Decoder, 
//		0x23170F69, 0x40C1, 0x278B, 0x04, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00);
//
//// {23170F69-40C1-278B-0401-060000000000}
//DEFINE_GUID(CLSID_CCompressImplodeDecoder, 
//		0x23170F69, 0x40C1, 0x278B, 0x04, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00);
//
//// {23170F69-40C1-278B-06F1-0101000000100}
//DEFINE_GUID(CLSID_CCryptoZipEncoder, 
//		0x23170F69, 0x40C1, 0x278B, 0x06, 0xF1, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00);
//
//// {23170F69-40C1-278B-06F1-0101000000000}
//DEFINE_GUID(CLSID_CCryptoZipDecoder, 
//		0x23170F69, 0x40C1, 0x278B, 0x06, 0xF1, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00);

// {23170F69-40C1-278A-1000-000110010000}
DEFINE_GUID(CLSID_CZipHandler, 
		0x23170F69, 0x40C1, 0x278A, 0x10, 0x00, 0x00, 0x01, 0x10, 0x01, 0x00, 0x00);

#define SEVENZIP_ALL_HANDLERS CLSID_CArjHandler, CLSID_CFormat7z, CLSID_CBZip2Handler, \
	CLSID_CCabHandler, CLSID_CChmHandler, CLSID_CCpioHandler, CLSID_CDebHandler, \
	CLSID_CGZipHandler, CLSID_CIsoHandler, CLSID_CLzhHandler, CLSID_CNsisHandler, \
	CLSID_CRarHandler, CLSID_CRpmHandler, CLSID_CSplitHandler, CLSID_CTarHandler, \
	CLSID_CZHandler, CLSID_CZipHandler

#ifdef INITGUID
	extern "C" const GUID guids[] = {SEVENZIP_ALL_HANDLERS};
#else
	extern "C" const GUID guids[];
#endif

#define SEVENZIP_HANDLES_COUNT (sizeof(guids) / sizeof(guids[0]))
	
#define __CLSIDS_H__INCLUDED__
#endif // __CLSIDS_H__INCLUDED__

